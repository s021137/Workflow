name: Collect Modified Projects

on: [push, pull_request]

jobs:
  find-projects:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Get all project directories
        id: get-projects
        run: |
          # Initialize an empty array for projects
          projects=()

          # Find all project directories containing .sln files
          for dir in */; do
            if ls "${dir}"*.sln 1> /dev/null 2>&1; then
              projects+=("$dir")
            fi
          done

          # Print all projects found
          echo "All projects found: ${projects[@]}"

          # Save the projects as a single string in an environment variable
          echo "ALL_PROJECTS=${projects[*]}" >> $GITHUB_ENV

      - name: Check for changes in project directories
        id: check-changes
        run: |
          # Initialize an empty array for modified projects
          modified_projects=()

          # Read all project directories from the environment variable
          IFS=' ' read -r -a projects_array <<< "$ALL_PROJECTS"

          # Check if there are previous commits to compare
          if git rev-parse --quiet --verify HEAD^; then
            # Loop through each project directory
            for dir in "${projects_array[@]}"; do
              # Check for changes in the .sln files in this directory
              if git diff --name-only HEAD^ HEAD -- "${dir}"*.sln | grep -q '\.sln$'; then
                modified_projects+=("$dir")  # Add modified project to the array
              fi
            done

            # Print modified projects
            echo "Modified projects found: ${modified_projects[@]}"
          else
            echo "No previous commit to compare. Skipping change detection."
          fi

          # Save the modified projects as a single string in an environment variable
          echo "MODIFIED_PROJECTS=${modified_projects[*]}" >> $GITHUB_ENV

      - name: Use the array of modified projects
        run: |
          echo "Array of modified projects:"
          IFS=' ' read -r -a modified_projects_array <<< "$MODIFIED_PROJECTS"
          for project in "${modified_projects_array[@]}"; do
            echo "$project"
            # You can add additional commands to operate on each modified project here
          done
